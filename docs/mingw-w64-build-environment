1) Create fresh ubuntu 14.04 (Trusty Tahr) VM
    http://cdimage.ubuntu.com/daily-live/current/trusty-desktop-amd64.iso

    (Note: ubuntu 13.xx can also be used, but mingw-w64 only comes with gcc4.6.3 which lacks full support for C++11)

2) Install packages
    $ sudo apt-get update && sudo apt-get upgrade
    $ sudo apt-get install ssh git build-essential mingw-w64 gcc-mingw-w64 g++-mingw-w64 binutils-mingw-w64

3) Build boost for windows
    $ wget https://downloads.sourceforge.net/project/boost/boost/1.63.0/boost_1_63_0.tar.bz2
    $ tar -xjvf boost_1_63_0.tar.bz2
    $ cd boost_1_63_0
    $ ./bootstrap.sh --without-icu
    $ echo "using gcc : mingw32 : x86_64-w64-mingw32-g++ : <rc>x86_64-w64-mingw32-windres <archiver>x86_64-w64-mingw32-ar <ranlib>x86_64-w64-mingw32-ranlib ;" > user-config.jam
    $ sudo ./b2 toolset=gcc address-model=64 target-os=windows variant=release threading=multi threadapi=win32 \
        link=static runtime-link=static --prefix=/usr/x86_64-w64-mingw32 --user-config=user-config.jam \
        --without-mpi --without-python -sNO_BZIP2=1 --layout=tagged install
    $ cd

    (-Wno-unused-local-typedefs -Wno-unused-parameter to suppress warnings)

4) Build Qt5 for windows (version 5.8.0 doesn't work)
    $ wget https://download.qt.io/new_archive/qt/5.7/5.7.1/single/qt-everywhere-opensource-src-5.7.1.tar.gz
    $ tar -xzvf qt-everywhere-opensource-src-5.7.1.tar.gz

    Qt5 has some problems with preprocessor definitions when building with MinGW.
    $ sed -i -e 's/QT_NO_SESSIONMANAGER/__QT_NO_SESSIONMANAGER/g' \
        ~/qt-everywhere-opensource-src-5.7.1/qtbase/src/gui/kernel/qplatformsessionmanager.h \
        ~/qt-everywhere-opensource-src-5.7.1/qtbase/src/gui/kernel/qsessionmanager.h

    $ export INSTALLPREFIX=/usr/x86_64-w64-mingw32
    $ mkdir qt5-win64-build
    $ cd qt5-win64-build
    $ ../qt-everywhere-opensource-src-5.7.1/configure -prefix $INSTALLPREFIX -hostprefix $INSTALLPREFIX/host -plugindir $INSTALLPREFIX/plugins \
        -translationdir $INSTALLPREFIX/translations -xplatform win32-g++ -device-option CROSS_COMPILE=x86_64-w64-mingw32- \
        -confirm-license -release -opensource -static -qt-pcre -no-icu -no-glib -no-sql-sqlite -no-cups -no-iconv -no-dbus \
        -nomake examples -no-pch -no-sql-odbc -no-compile-examples -no-qml-debug -no-sm -opengl desktop \
        -skip qtactiveqt -skip qt3d -no-openssl -qt-zlib
    $ make
    $ sudo make install

    (-Wno-strict-overflow -Wno-strict-aliasing -Wno-unused-parameters to suppress warnings)

    Patch Qt5 to work with cmake for static build. Windows uses library naming convention name.lib, MinGW uses libname.a. So we must replace the names:
    $ cd /usr/x86_64-w64-mingw32/lib/cmake
    $ sudo sed -i -e 's/\/\([^\.]*\)\.lib/\/lib\1\.a/g' $(find * -type f)
    $ cd

    You will need to set the path to find the appropriate qmake, i.e.:
    $ export PATH=/usr/x86_64-w64-mingw32/host/bin:$PATH

5) Build OpenSSL for windows (version 1.1.x doesn't work)
    $ wget https://www.openssl.org/source/openssl-1.0.2k.tar.gz
    $ tar -xzvf openssl-1.0.2k.tar.gz
    $ cp -R openssl-1.0.2k openssl-win64-build
    $ cd openssl-win64-build
    $ CROSS_COMPILE="x86_64-w64-mingw32-" ./Configure mingw64 no-asm no-shared --prefix=/usr/x86_64-w64-mingw32
    $ make
    $ sudo make install_sw
    $ cd

    (-Wno-unused-function to suppress warnings)

6) Build SQLite for windows
    $ wget https://www.sqlite.org/2017/sqlite-autoconf-3180000.tar.gz
    $ tar -xzvf sqlite-autoconf-3180000.tar.gz
    $ mkdir sqlite-win64-build
    $ cd sqlite-win64-build
    $ ../sqlite-autoconf-3180000/configure --host=x86_64-w64-mingw32 --target=windows --prefix=/usr/x86_64-w64-mingw32 CFLAGS=-DSQLITE_ENABLE_UNLOCK_NOTIFY
    $ make
    $ sudo make install
    $ cd

7) Install ODB compiler and library
    $ mkdir odb
    $ cd odb

    Build and install libcutl for linux
    $ wget http://codesynthesis.com/download/libcutl/1.9/libcutl-1.9.0.tar.bz2
    $ tar -xjvf libcutl-1.9.0.tar.bz2
    $ cd libcutl-1.9.0
    $ ./configure
    $ make
    $ sudo make install
    $ sudo ldconfig
    $ cd ..

    Build and install ODB compiler for linux
    $ sudo apt-get install gcc-4.8-plugin-dev
    $ wget http://codesynthesis.com/download/odb/2.4/odb-2.4.0.tar.bz2
    $ tar -xjvf odb-2.4.0.tar.bz2
    $ cd odb-2.4.0
    $ ./configure
    $ make
    $ sudo make install
    $ cd ..

8) Build ODB Common Runtime Library (libodb) for windows
    $ wget http://codesynthesis.com/download/odb/2.4/libodb-2.4.0.tar.bz2
    $ tar -xjvf libodb-2.4.0.tar.bz2
    $ mkdir libodb-win64-build
    $ cd libodb-win64-build 
    $ ../libodb-2.4.0/configure --host=x86_64-w64-mingw32 --prefix=/usr/x86_64-w64-mingw32 --enable-threads=win32 \
        CPPFLAGS="-I/usr/x86_64-w64-mingw32/include -DLIBODB_STATIC_LIB" --disable-shared LDFLAGS=-L/usr/x86_64-w64-mingw32/lib
    $ make
    $ sudo make install
    $ cd ..

9) Build ODB Database Runtime Library for sqlite (libodb-sqlite) for windows
    $ wget http://codesynthesis.com/download/odb/2.4/libodb-sqlite-2.4.0.tar.bz2
    $ tar -xjvf libodb-sqlite-2.4.0.tar.bz2
    $ mkdir libodb-sqlite-win64-build
    $ cd libodb-sqlite-win64-build
    $ ../libodb-sqlite-2.4.0/configure --host=x86_64-w64-mingw32 --prefix=/usr/x86_64-w64-mingw32 --enable-threads=win32 \
        CPPFLAGS="-I/usr/x86_64-w64-mingw32/include -DLIBODB_STATIC_LIB" --disable-shared LDFLAGS=-L/usr/x86_64-w64-mingw32/lib
    $ make
    $ sudo make install
    $ cd

10) ODB will, by default, use the linux headers. We want this behavior for system libraries, but we want to override it for
    nonsystem libraries. To do this, we create symlinks.
    $ cd /usr/x86_64-w64-mingw32
    $ sudo mkdir -p local/include
    $ cd local/include
    $ sudo ln -s ../../include/odb/ odb
    $ sudo ln -s ../../include/boost/ boost
    $ sudo ln -s ../../include/openssl/ openssl
    $ sudo ln -s ../../include/sqlite3.h sqlite3.h
    $ sudo ln -s ../../include/sqlite3ext.h sqlite3ext.h
    $ cd

11) Clone mSIGNA repository, in case you haven't done so already:
    $ git clone https://github.com/ciphrex/mSIGNA.git

12) Build qrencode QR Code C library (libqrencode) for windows
    $ cd mSIGNA/deps/qrencode-3.4.3
    $ ./configure --host=x86_64-w64-mingw32 --prefix=/usr/x86_64-w64-mingw32 --without-tools --enable-static --disable-shared
    $ make
    $ sudo make install
    $ cd
